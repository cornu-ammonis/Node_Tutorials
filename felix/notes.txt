var hello = require('./hello');
hello.world();

(in hello.js):
exports.world = function() {
  console.log('Hello World');
}

exports is the object pulled in by require

you can directly override the exports object 
module.exports = function() {
  // ...
}


*** REQUIRE CALLS ***

The next thing you need to know about the module system is how it deals with require calls that don't include a relative hint about the location of the included file. Take for example:

var http = require('http');
What node.js will do in this case, is to first look if there is a core module named http, and since that's the case, return that directly. But what about non-core modules, such as 'mysql'?

var mysql = require('mysql');
In this case node.js will walk up the directory tree, moving through each parent directory in turn, checking in each to see if there is a folder called 'node_modules'. If such a folder is found, node.js will look into this folder for a file called 'mysql.js'. If no matching file is found and the directory root '/' is reached, node.js will give up and throw an exception.

Last but not least, node.js also lets you create an 'index.js' file, which indicates the main include file for a directory. So if you call require('./foo'), both a 'foo.js' file as well as an 'foo/index.js' file will be considered, this goes for non-relative includes as well.


*** EVENT HANDLERS / OBSERVER PATTERN ***